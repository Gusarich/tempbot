import logging
from aiogram import Bot, Dispatcher, executor
from aiogram.types import *
from asyncio import sleep
import random


API_TOKEN = ''

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


WELCOME_MESSAGE = """–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç EZWORKüëã
–Ø –±—É–¥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ —à–∫–æ–ª—å–Ω—ã–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ —Ç–µ–±—èüò±
–ù–∞–ø–∏—à–∏ –º–Ω–µ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ —Å–ø—É—Å—Ç—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —è –ü–û–ú–û–ì–£ –¢–ï–ë–ïü§ó

–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —É–¥–æ–±–Ω–æ –∫–∏–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Ç–æ –ø–∏—à–∏ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é @PIR4T
–Ø –Ω–µ –∫—É—Å–∞—é—Å—åüòâ!"""
ORDER_MESSAGE = """–°–æ–æ–±—â–µ–Ω–∏–µ"""
CANCEL_MESSAGE = """–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!"""
FILLED_MESSAGE = """–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {}\n–û–∂–∏–¥–∞–π—Ç–µ...‚è±"""
ACCEPTED_MESSAGE = """–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç"""
DENIED_MESSAGE = """–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω!"""

FIRST_QUESTION = """1. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ä—É–º–∞.
–ï—Å–ª–∏ —Ç—ã –Ω–µ —Å —Ñ–æ—Ä—É–º–∞ - —Ç–æ –ø—Ä–æ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏ "–º–∏–Ω—É—Å"."""
SECOND_QUESTION = """–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å?"""
THIRD_QUESTION = """–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å?"""
FOURTH_QUESTION = """–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å?"""
FIFTH_QUESTION = """–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å?"""
SIXTH_QUESTION = """–®–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å?"""

BUTTON_1 = '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
BUTTON_2 = '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'

OWNER_ID = 702885050

kb_1 = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(BUTTON_1))
kb_2 = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(BUTTON_2))

users = {}
orders = {}


def get_users():
    with open('users.txt', 'r') as f:
        return [int(i) for i in f.readlines()]


def update_users(users):
    with open('users.txt', 'w') as f:
        f.write('\n'.join([str(i) for i in users]))


def get_banneds():
    with open('banneds.txt', 'r') as f:
        return [int(i) for i in f.readlines()]


def update_banneds(banneds):
    with open('banneds.txt', 'w') as f:
        f.write('\n'.join([str(i) for i in banneds]))


@dp.message_handler(commands=['start'])
async def handler(message: Message):
    id = message.from_user.id

    if id in get_banneds():
        return

    ids = set(get_users())
    if id not in ids:
        ids.add(id)
        update_users(list(ids))

    if id not in users.keys():
        users[id] = {
            'step': 0,
            'answers': []
        }

    if users[id]['step'] == 7:
        return

    if id != OWNER_ID:
        await message.answer(WELCOME_MESSAGE, reply_markup=kb_1)
    else:
        await message.answer(WELCOME_MESSAGE)


@dp.message_handler(content_types=ContentType.ANY)
async def handler(message: Message):
    id, tx = message.from_user.id, message.text

    if id in get_banneds():
        return

    ids = set(get_users())
    if id not in ids:
        ids.add(id)
        update_users(list(ids))

    if id == OWNER_ID:
        if tx.startswith('/accept_'):
            order_id = int(tx.split('_')[1])
            user_id = orders[order_id]
            del orders[order_id]
            users[user_id]['step'] = 0
            await bot.send_message(user_id, ACCEPTED_MESSAGE, reply_markup=kb_1)
            await message.answer('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!')
        elif tx.startswith('/ban '):
            id_ban = int(tx.split()[-1])
            banneds = set(get_banneds())
            banneds.add(id_ban)
            update_banneds(list(banneds))
            await message.answer('–ó–∞–±–∞–Ω–µ–Ω!')
        elif tx.startswith('/unban '):
            id_ban = int(tx.split()[-1])
            banneds = set(get_banneds())
            banneds.discard(id_ban)
            update_banneds(list(banneds))
            await message.answer('–†–∞–∑–±–∞–Ω–µ–Ω!')
        elif tx.startswith('/broadcast '):
            text = tx[11:]
            good = bad = 0
            for id in ids:
                try:
                    await bot.send_message(id, text)
                    good += 1
                except:
                    bad += 1
            await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ: {good}\n–û—à–∏–±–∫–∞: {bad}\n–í—Å–µ–≥–æ: {good + bad}')
        elif tx == '/users':
            await message.answer(f'–Æ–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {len(get_users())}\n–ò–∑ –Ω–∏—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {len(get_banneds())}')
        elif message.reply_to_message and '/accept_' in message.reply_to_message.text:
            txt = message.reply_to_message.text
            order_id = int(txt.split('/accept_')[1])
            user_id = orders[order_id]
            await bot.forward_message(chat_id=user_id, from_chat_id=OWNER_ID, message_id=message.message_id)
            users[user_id]['step'] = 7

    elif id not in users.keys():
        users[id] = {
            'step': 0,
            'answers': []
        }

    elif tx == BUTTON_1 and users[id]['step'] != 7:
        await message.answer(ORDER_MESSAGE)
        await sleep(1)
        await message.answer(FIRST_QUESTION, reply_markup=kb_2)
        users[id]['step'] = 1

    elif tx == BUTTON_2 and users[id]['step'] != 7:
        users[id] = {
            'step': 0,
            'answers': []
        }
        await message.answer(CANCEL_MESSAGE, reply_markup=kb_1)

    elif users[id]['step'] == 1:
        await message.answer(SECOND_QUESTION)
        users[id]['answers'].append(message.message_id)
        users[id]['step'] = 2

    elif users[id]['step'] == 2:
        await message.answer(THIRD_QUESTION)
        users[id]['answers'].append(message.message_id)
        users[id]['step'] = 3

    elif users[id]['step'] == 3:
        await message.answer(FOURTH_QUESTION)
        users[id]['answers'].append(message.message_id)
        users[id]['step'] = 4

    elif users[id]['step'] == 4:
        await message.answer(FIFTH_QUESTION)
        users[id]['answers'].append(message.message_id)
        users[id]['step'] = 5

    elif users[id]['step'] == 5:
        await message.answer(SIXTH_QUESTION)
        users[id]['answers'].append(message.message_id)
        users[id]['step'] = 6

    elif users[id]['step'] == 6:
        order_id = random.randint(1000, 9999)
        while order_id in orders.keys():
            order_id = random.randint(1000, 9999)

        orders[order_id] = id

        await message.answer(FILLED_MESSAGE.format(order_id), reply_markup=kb_1)
        users[id]['answers'].append(message.message_id)
        users[id]['step'] = 0

        await bot.send_message(OWNER_ID, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\nID –ó–∞–∫–∞–∑–∞: {order_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{id}](tg://user?id={id})\n\n–ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ß—Ç–æ –±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /accept\\_{order_id}', parse_mode=ParseMode.MARKDOWN)
        for msg in users[id]['answers']:
            await bot.forward_message(chat_id=OWNER_ID, from_chat_id=id, message_id=msg)

        users[id]['answers'] = []

        await sleep(7200)

        await message.answer(DENIED_MESSAGE, reply_markup=kb_1)
        del orders[order_id]

    elif users[id]['step'] == 7:
        for order_id, user_id in orders.items():
            if user_id == id:
                break
        await bot.send_message(OWNER_ID, f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É {order_id}!\n\n–ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ß—Ç–æ –±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /accept_{order_id}')
        await bot.forward_message(chat_id=OWNER_ID, from_chat_id=id, message_id=message.message_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
